package apply

import (
	"bufio"
	"context"
	"database/sql"
	"fmt"
	"os"
	"strings"

	planCmd "github.com/pgschema/pgschema/cmd/plan"
	"github.com/pgschema/pgschema/cmd/util"
	"github.com/pgschema/pgschema/internal/fingerprint"
	"github.com/pgschema/pgschema/internal/plan"
	utilQuote "github.com/pgschema/pgschema/internal/util"
	"github.com/pgschema/pgschema/internal/version"
	"github.com/spf13/cobra"
)

var (
	applyHost            string
	applyPort            int
	applyDB              string
	applyUser            string
	applyPassword        string
	applySchema          string
	applyFile            string
	applyPlan            string
	applyAutoApprove     bool
	applyNoColor         bool
	applyLockTimeout     string
	applyApplicationName string
)


var ApplyCmd = &cobra.Command{
	Use:          "apply",
	Short:        "Apply migration plan to update a database schema",
	Long:         "Apply a migration plan to update a database schema. Either provide a desired state file (--file) to generate and apply a plan, or provide a pre-generated plan file (--plan) to execute directly.",
	RunE:         RunApply,
	SilenceUsage: true,
	PreRunE: util.PreRunEWithEnvVars(&applyDB, &applyUser),
}

func init() {
	// Target database connection flags
	ApplyCmd.Flags().StringVar(&applyHost, "host", util.GetEnvWithDefault("PGHOST", "localhost"), "Database server host (env: PGHOST)")
	ApplyCmd.Flags().IntVar(&applyPort, "port", util.GetEnvIntWithDefault("PGPORT", 5432), "Database server port (env: PGPORT)")
	ApplyCmd.Flags().StringVar(&applyDB, "db", "", "Database name (required) (env: PGDATABASE)")
	ApplyCmd.Flags().StringVar(&applyUser, "user", "", "Database user name (required) (env: PGUSER)")
	ApplyCmd.Flags().StringVar(&applyPassword, "password", "", "Database password (optional, can also use PGPASSWORD env var)")
	ApplyCmd.Flags().StringVar(&applySchema, "schema", "public", "Schema name")

	// Desired state schema file flag
	ApplyCmd.Flags().StringVar(&applyFile, "file", "", "Path to desired state SQL schema file")

	// Plan file flag
	ApplyCmd.Flags().StringVar(&applyPlan, "plan", "", "Path to plan JSON file")

	// Apply behavior flags
	ApplyCmd.Flags().BoolVar(&applyAutoApprove, "auto-approve", false, "Apply changes without prompting for approval")
	ApplyCmd.Flags().BoolVar(&applyNoColor, "no-color", false, "Disable colored output")
	ApplyCmd.Flags().StringVar(&applyLockTimeout, "lock-timeout", "", "Maximum time to wait for database locks (e.g., 30s, 5m, 1h)")
	ApplyCmd.Flags().StringVar(&applyApplicationName, "application-name", util.GetEnvWithDefault("PGAPPNAME", "pgschema"), "Application name for database connection (visible in pg_stat_activity) (env: PGAPPNAME)")

	// Mark file and plan as mutually exclusive
	ApplyCmd.MarkFlagsMutuallyExclusive("file", "plan")
}

// RunApply executes the apply command logic. Exported for testing.
func RunApply(cmd *cobra.Command, args []string) error {
	// Validate that either --file or --plan is provided
	if applyFile == "" && applyPlan == "" {
		return fmt.Errorf("either --file or --plan must be specified")
	}

	// Derive final password: use provided password or check environment variable
	finalPassword := applyPassword
	if finalPassword == "" {
		if envPassword := os.Getenv("PGPASSWORD"); envPassword != "" {
			finalPassword = envPassword
		}
	}

	var migrationPlan *plan.Plan
	var err error

	if applyPlan != "" {
		// Load plan from JSON file
		planData, err := os.ReadFile(applyPlan)
		if err != nil {
			return fmt.Errorf("failed to read plan file: %w", err)
		}

		migrationPlan, err = plan.FromJSON(planData)
		if err != nil {
			return fmt.Errorf("failed to load plan: %w", err)
		}

		// Validate that the plan was generated by the same pgschema version
		currentVersion := version.App()
		if migrationPlan.PgschemaVersion != currentVersion {
			return fmt.Errorf("plan version mismatch: plan was generated by pgschema version %s, but current version is %s. Please regenerate the plan with the current version", migrationPlan.PgschemaVersion, currentVersion)
		}

		// Validate that the plan format version is supported (forward compatibility)
		supportedPlanVersion := version.PlanFormat()
		if migrationPlan.Version != supportedPlanVersion {
			return fmt.Errorf("unsupported plan format version: plan uses format version %s, but this pgschema version only supports format version %s. Please upgrade pgschema to apply this plan", migrationPlan.Version, supportedPlanVersion)
		}
	} else {
		// Generate plan from file (existing logic)
		config := &planCmd.PlanConfig{
			Host:            applyHost,
			Port:            applyPort,
			DB:              applyDB,
			User:            applyUser,
			Password:        finalPassword,
			Schema:          applySchema,
			File:            applyFile,
			ApplicationName: applyApplicationName,
		}

		// Generate plan using shared logic
		migrationPlan, err = planCmd.GeneratePlan(config)
		if err != nil {
			return err
		}
	}

	// Validate schema fingerprint if plan has one
	if migrationPlan.SourceFingerprint != nil {
		err := validateSchemaFingerprint(migrationPlan, applyHost, applyPort, applyDB, applyUser, finalPassword, applySchema, applyApplicationName)
		if err != nil {
			return err
		}
	}

	// Check if there are any changes to apply by examining the plan diffs
	if !migrationPlan.HasAnyChanges() {
		fmt.Println("No changes to apply. Database schema is already up to date.")
		return nil
	}

	// Display the plan
	fmt.Print(migrationPlan.HumanColored(!applyNoColor))

	// Prompt for approval if not auto-approved
	if !applyAutoApprove {
		fmt.Print("\nDo you want to apply these changes? (yes/no): ")
		reader := bufio.NewReader(os.Stdin)
		response, err := reader.ReadString('\n')
		if err != nil {
			return fmt.Errorf("failed to read user input: %w", err)
		}

		response = strings.TrimSpace(strings.ToLower(response))
		if response != "yes" && response != "y" {
			fmt.Println("Apply cancelled.")
			return nil
		}
	}

	// Apply the changes
	fmt.Println("\nApplying changes...")

	// Build database connection for applying changes
	connConfig := &util.ConnectionConfig{
		Host:            applyHost,
		Port:            applyPort,
		Database:        applyDB,
		User:            applyUser,
		Password:        finalPassword,
		SSLMode:         "prefer",
		ApplicationName: applyApplicationName,
	}

	conn, err := util.Connect(connConfig)
	if err != nil {
		return fmt.Errorf("failed to connect to database: %w", err)
	}
	defer conn.Close()

	ctx := context.Background()

	// Set lock timeout before executing changes
	if applyLockTimeout != "" {
		_, err = conn.ExecContext(ctx, fmt.Sprintf("SET lock_timeout = '%s'", applyLockTimeout))
		if err != nil {
			return fmt.Errorf("failed to set lock timeout: %w", err)
		}
	}

	// Set search_path to target schema for unqualified table references
	if applySchema != "" && applySchema != "public" {
		quotedSchema := utilQuote.QuoteIdentifier(applySchema)
		_, err = conn.ExecContext(ctx, fmt.Sprintf("SET search_path TO %s, public", quotedSchema))
		if err != nil {
			return fmt.Errorf("failed to set search_path to target schema '%s': %w", applySchema, err)
		}
		fmt.Printf("Set search_path to: %s, public\n", quotedSchema)
	}

	// Generate SQL statements from the plan
	sqlStatements := migrationPlan.ToSQL(plan.SQLFormatRaw)

	// Skip execution if no changes
	if strings.TrimSpace(sqlStatements) == "-- No changes detected" || strings.TrimSpace(sqlStatements) == "-- No DDL statements generated" {
		fmt.Println("No SQL statements to execute.")
		return nil
	}

	// Execute by groups with wait directive support
	for i, group := range migrationPlan.Groups {
		fmt.Printf("\nExecuting group %d/%d...\n", i+1, len(migrationPlan.Groups))

		err = executeGroup(ctx, conn, group, i+1)
		if err != nil {
			return err
		}
	}

	fmt.Println("Changes applied successfully!")
	return nil
}

// validateSchemaFingerprint validates that the current database schema matches the expected fingerprint
func validateSchemaFingerprint(migrationPlan *plan.Plan, host string, port int, db, user, password, schema, applicationName string) error {
	// Get current state from target database
	currentStateIR, err := util.GetIRFromDatabase(host, port, db, user, password, schema, applicationName)
	if err != nil {
		return fmt.Errorf("failed to get current database state for fingerprint validation: %w", err)
	}

	// Compute current fingerprint
	currentFingerprint, err := fingerprint.ComputeFingerprint(currentStateIR, schema)
	if err != nil {
		return fmt.Errorf("failed to compute current fingerprint: %w", err)
	}

	// Compare with expected fingerprint
	if err := fingerprint.Compare(migrationPlan.SourceFingerprint, currentFingerprint); err != nil {
		return fmt.Errorf("schema fingerprint mismatch detected - the database schema has changed since the plan was generated.\n\n%w\n\nTo resolve this issue:\n1. Regenerate the plan with current database state: pgschema plan ...\n2. Review the new plan to ensure it's still correct\n3. Apply the new plan: pgschema apply ...", err)
	}

	return nil
}

// executeGroup executes all steps in a group, handling directives separately from SQL statements
func executeGroup(ctx context.Context, conn *sql.DB, group plan.ExecutionGroup, groupNum int) error {
	// Check if this group has directives
	hasDirectives := false

	for _, step := range group.Steps {
		if step.Directive != nil {
			hasDirectives = true
			break
		}
	}

	if !hasDirectives {
		// No directives - concatenate all SQL and execute in implicit transaction
		return executeGroupConcatenated(ctx, conn, group, groupNum)
	} else {
		// Has directives - execute statements individually
		return executeGroupIndividually(ctx, conn, group, groupNum)
	}
}

// executeGroupConcatenated concatenates all SQL statements and executes them in an implicit transaction
func executeGroupConcatenated(ctx context.Context, conn *sql.DB, group plan.ExecutionGroup, groupNum int) error {
	var sqlStatements []string

	// Collect all SQL statements
	for _, step := range group.Steps {
		sqlStatements = append(sqlStatements, step.SQL)
	}

	// Concatenate all SQL statements
	concatenatedSQL := strings.Join(sqlStatements, ";\n") + ";"

	fmt.Printf("  Executing %d statements in implicit transaction\n", len(sqlStatements))

	// Execute all statements in a single call (implicit transaction)
	_, err := conn.ExecContext(ctx, concatenatedSQL)
	if err != nil {
		return fmt.Errorf("failed to execute concatenated statements in group %d: %w", groupNum, err)
	}

	return nil
}

// executeGroupIndividually executes statements individually without transactions
func executeGroupIndividually(ctx context.Context, conn *sql.DB, group plan.ExecutionGroup, groupNum int) error {
	for stepIdx, step := range group.Steps {
		if step.Directive != nil {
			// Handle directive execution
			err := executeDirective(ctx, conn, step.Directive, step.SQL)
			if err != nil {
				return fmt.Errorf("directive failed in group %d, step %d: %w", groupNum, stepIdx+1, err)
			}
		} else {
			// Execute regular SQL statement
			fmt.Printf("  Executing: %s\n", truncateSQL(step.SQL, 80))

			_, err := conn.ExecContext(ctx, step.SQL)
			if err != nil {
				return fmt.Errorf("failed to execute statement in group %d, step %d: %w", groupNum, stepIdx+1, err)
			}
		}
	}
	return nil
}

// truncateSQL truncates a SQL statement for display purposes
func truncateSQL(sql string, maxLen int) string {
	// Remove extra whitespace and newlines
	cleaned := strings.ReplaceAll(strings.TrimSpace(sql), "\n", " ")
	cleaned = strings.ReplaceAll(cleaned, "\t", " ")

	// Collapse multiple spaces into single spaces
	for strings.Contains(cleaned, "  ") {
		cleaned = strings.ReplaceAll(cleaned, "  ", " ")
	}

	if len(cleaned) <= maxLen {
		return cleaned
	}

	return cleaned[:maxLen-3] + "..."
}
