{
  "version": "1.0.0",
  "pgschema_version": "1.4.0",
  "created_at": "1970-01-01T00:00:00Z",
  "source_fingerprint": {
    "hash": "00cecda254bb0731ef1d20915ed24ba4cdfd550430d43bfb9e0d0815c4f1b738"
  },
  "groups": [
    {
      "steps": [
        {
          "sql": "DROP PROCEDURE IF EXISTS simple_salary_update(IN p_emp_no integer, IN p_amount integer);",
          "type": "procedure",
          "operation": "drop",
          "path": "public.simple_salary_update"
        },
        {
          "sql": "DROP TABLE IF EXISTS title CASCADE;",
          "type": "table",
          "operation": "drop",
          "path": "public.title"
        },
        {
          "sql": "DROP TABLE IF EXISTS dept_manager CASCADE;",
          "type": "table",
          "operation": "drop",
          "path": "public.dept_manager"
        },
        {
          "sql": "CREATE TYPE employee_status AS ENUM (\n    'active',\n    'inactive',\n    'terminated'\n);",
          "type": "type",
          "operation": "create",
          "path": "public.employee_status"
        },
        {
          "sql": "CREATE TABLE IF NOT EXISTS employee_status_log (\n    id SERIAL,\n    emp_no integer NOT NULL,\n    status employee_status NOT NULL,\n    effective_date date DEFAULT CURRENT_DATE NOT NULL,\n    notes text,\n    CONSTRAINT employee_status_log_pkey PRIMARY KEY (id),\n    CONSTRAINT employee_status_log_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee (emp_no) ON DELETE CASCADE\n);",
          "type": "table",
          "operation": "create",
          "path": "public.employee_status_log"
        },
        {
          "sql": "CREATE INDEX IF NOT EXISTS idx_employee_status_log_effective_date ON employee_status_log (effective_date);",
          "type": "table.index",
          "operation": "create",
          "path": "public.employee_status_log.idx_employee_status_log_effective_date"
        },
        {
          "sql": "CREATE INDEX IF NOT EXISTS idx_employee_status_log_emp_no ON employee_status_log (emp_no);",
          "type": "table.index",
          "operation": "create",
          "path": "public.employee_status_log.idx_employee_status_log_emp_no"
        },
        {
          "sql": "CREATE OR REPLACE TRIGGER employee_status_log_trigger\n    AFTER INSERT OR UPDATE ON employee_status_log\n    FOR EACH ROW\n    EXECUTE FUNCTION log_dml_operations('hr', 'medium');",
          "type": "table.trigger",
          "operation": "create",
          "path": "public.employee_status_log.employee_status_log_trigger"
        },
        {
          "sql": "ALTER TABLE audit ENABLE ROW LEVEL SECURITY;",
          "type": "table.rls",
          "operation": "create",
          "path": "public.audit"
        },
        {
          "sql": "CREATE POLICY audit_insert_system ON audit FOR INSERT TO PUBLIC WITH CHECK (true);",
          "type": "table.policy",
          "operation": "create",
          "path": "public.audit.audit_insert_system"
        },
        {
          "sql": "CREATE POLICY audit_user_isolation ON audit TO PUBLIC USING (user_name = CURRENT_USER);",
          "type": "table.policy",
          "operation": "create",
          "path": "public.audit.audit_user_isolation"
        },
        {
          "sql": "ALTER TABLE employee ADD COLUMN status employee_status DEFAULT 'active' NOT NULL;",
          "type": "table.column",
          "operation": "create",
          "path": "public.employee.status"
        },
        {
          "sql": "CREATE OR REPLACE VIEW current_dept_emp AS\nSELECT l.emp_no,\n    d.dept_no,\n    l.from_date,\n    l.to_date\n   FROM (dept_emp d\n     JOIN dept_emp_latest_date l ON (((d.emp_no = l.emp_no) AND (d.from_date = l.from_date) AND (l.to_date = d.to_date))));",
          "type": "view",
          "operation": "alter",
          "path": "public.current_dept_emp"
        },
        {
          "sql": "DROP MATERIALIZED VIEW employee_salary_summary RESTRICT;",
          "type": "materialized_view",
          "operation": "alter",
          "path": "public.employee_salary_summary"
        },
        {
          "sql": "CREATE MATERIALIZED VIEW IF NOT EXISTS employee_salary_summary AS\nSELECT d.dept_no,\n    d.dept_name,\n    count(DISTINCT e.emp_no) AS employee_count,\n    avg(s.amount) AS avg_salary,\n    max(s.amount) AS max_salary,\n    min(s.amount) AS min_salary\n   FROM (((employee e\n     JOIN dept_emp de ON ((e.emp_no = de.emp_no)))\n     JOIN department d ON ((de.dept_no = d.dept_no)))\n     JOIN salary s ON ((e.emp_no = s.emp_no)))\n  WHERE ((de.to_date = '9999-01-01'::date) AND (s.to_date = '9999-01-01'::date))\n  GROUP BY d.dept_no, d.dept_name;",
          "type": "materialized_view",
          "operation": "alter",
          "path": "public.employee_salary_summary"
        }
      ]
    },
    {
      "steps": [
        {
          "sql": "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_emp_salary_summary_dept_no ON employee_salary_summary (dept_no);",
          "type": "materialized_view.index",
          "operation": "create",
          "path": "public.employee_salary_summary.idx_emp_salary_summary_dept_no"
        }
      ]
    },
    {
      "steps": [
        {
          "sql": "SELECT \n    COALESCE(i.indisvalid, false) as done,\n    CASE \n        WHEN p.blocks_total > 0 THEN p.blocks_done * 100 / p.blocks_total\n        ELSE 0\n    END as progress\nFROM pg_class c\nLEFT JOIN pg_index i ON c.oid = i.indexrelid\nLEFT JOIN pg_stat_progress_create_index p ON c.oid = p.index_relid\nWHERE c.relname = 'idx_emp_salary_summary_dept_no';",
          "directive": {
            "type": "wait",
            "message": "Creating index idx_emp_salary_summary_dept_no"
          },
          "type": "materialized_view.index",
          "operation": "create",
          "path": "public.employee_salary_summary.idx_emp_salary_summary_dept_no"
        }
      ]
    }
  ]
}
