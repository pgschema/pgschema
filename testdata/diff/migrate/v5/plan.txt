Plan: 2 to add, 4 to modify, 3 to drop.

Summary by type:
  types: 1 to add
  procedures: 1 to drop
  tables: 1 to add, 2 to modify, 2 to drop
  views: 1 to modify
  materialized views: 1 to modify

Types:
  + employee_status

Procedures:
  - simple_salary_update

Tables:
  ~ audit
    + audit_insert_system (policy)
    + audit_user_isolation (policy)
    + audit (rls)
  - dept_manager
  ~ employee
    + status (column)
  + employee_status_log
    + idx_employee_status_log_effective_date (index)
    + idx_employee_status_log_emp_no (index)
    + employee_status_log_trigger (trigger)
  - title

Views:
  ~ current_dept_emp

Materialized views:
  ~ employee_salary_summary
    + idx_emp_salary_summary_dept_no (index)

DDL to be executed:
--------------------------------------------------

-- Transaction Group #1
DROP PROCEDURE IF EXISTS simple_salary_update(IN p_emp_no integer, IN p_amount integer);

DROP TABLE IF EXISTS title CASCADE;

DROP TABLE IF EXISTS dept_manager CASCADE;

CREATE TYPE employee_status AS ENUM (
    'active',
    'inactive',
    'terminated'
);

CREATE TABLE IF NOT EXISTS employee_status_log (
    id SERIAL,
    emp_no integer NOT NULL,
    status employee_status NOT NULL,
    effective_date date DEFAULT CURRENT_DATE NOT NULL,
    notes text,
    CONSTRAINT employee_status_log_pkey PRIMARY KEY (id),
    CONSTRAINT employee_status_log_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee (emp_no) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS idx_employee_status_log_effective_date ON employee_status_log (effective_date);

CREATE INDEX IF NOT EXISTS idx_employee_status_log_emp_no ON employee_status_log (emp_no);

CREATE OR REPLACE TRIGGER employee_status_log_trigger
    AFTER INSERT OR UPDATE ON employee_status_log
    FOR EACH ROW
    EXECUTE FUNCTION log_dml_operations('hr', 'medium');

ALTER TABLE audit ENABLE ROW LEVEL SECURITY;

CREATE POLICY audit_insert_system ON audit FOR INSERT TO PUBLIC WITH CHECK (true);

CREATE POLICY audit_user_isolation ON audit TO PUBLIC USING (user_name = CURRENT_USER);

ALTER TABLE employee ADD COLUMN status employee_status DEFAULT 'active' NOT NULL;

CREATE OR REPLACE VIEW current_dept_emp AS
SELECT l.emp_no,
    d.dept_no,
    l.from_date,
    l.to_date
   FROM (dept_emp d
     JOIN dept_emp_latest_date l ON (((d.emp_no = l.emp_no) AND (d.from_date = l.from_date) AND (l.to_date = d.to_date))));

DROP MATERIALIZED VIEW employee_salary_summary RESTRICT;

CREATE MATERIALIZED VIEW IF NOT EXISTS employee_salary_summary AS
SELECT d.dept_no,
    d.dept_name,
    count(DISTINCT e.emp_no) AS employee_count,
    avg(s.amount) AS avg_salary,
    max(s.amount) AS max_salary,
    min(s.amount) AS min_salary
   FROM (((employee e
     JOIN dept_emp de ON ((e.emp_no = de.emp_no)))
     JOIN department d ON ((de.dept_no = d.dept_no)))
     JOIN salary s ON ((e.emp_no = s.emp_no)))
  WHERE ((de.to_date = '9999-01-01'::date) AND (s.to_date = '9999-01-01'::date))
  GROUP BY d.dept_no, d.dept_name;

-- Transaction Group #2
CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_emp_salary_summary_dept_no ON employee_salary_summary (dept_no);

-- Transaction Group #3
-- pgschema:wait
SELECT 
    COALESCE(i.indisvalid, false) as done,
    CASE 
        WHEN p.blocks_total > 0 THEN p.blocks_done * 100 / p.blocks_total
        ELSE 0
    END as progress
FROM pg_class c
LEFT JOIN pg_index i ON c.oid = i.indexrelid
LEFT JOIN pg_stat_progress_create_index p ON c.oid = p.index_relid
WHERE c.relname = 'idx_emp_salary_summary_dept_no';
