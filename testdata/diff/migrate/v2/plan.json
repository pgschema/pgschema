{
  "version": "1.0.0",
  "pgschema_version": "1.0.0",
  "created_at": "1970-01-01T00:00:00Z",
  "source_fingerprint": {
    "hash": "e989216806a1e82a6a01d6d5898b00b5d94d3a5888c6ef481fa5f931f649aab5"
  },
  "groups": [
    {
      "steps": [
        {
          "statements": [
            {
              "sql": "ALTER TABLE department\nADD CONSTRAINT department_dept_name_key UNIQUE (dept_name);",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "create",
          "path": "public.department.department_dept_name_key"
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE dept_emp DROP CONSTRAINT dept_emp_dept_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "drop",
          "path": "public.dept_emp.dept_emp_dept_no_fkey"
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE dept_emp\nADD CONSTRAINT dept_emp_dept_no_fkey FOREIGN KEY (dept_no) REFERENCES department(dept_no) ON DELETE CASCADE NOT VALID;",
              "can_run_in_transaction": true
            },
            {
              "sql": "ALTER TABLE dept_emp VALIDATE CONSTRAINT dept_emp_dept_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "create",
          "path": "public.dept_emp.dept_emp_dept_no_fkey",
          "rewrite": {
            "statements": [
              {
                "sql": "ALTER TABLE dept_emp\nADD CONSTRAINT dept_emp_dept_no_fkey FOREIGN KEY (dept_no) REFERENCES department(dept_no) ON DELETE CASCADE NOT VALID;",
                "can_run_in_transaction": true
              },
              {
                "sql": "ALTER TABLE dept_emp VALIDATE CONSTRAINT dept_emp_dept_no_fkey;",
                "can_run_in_transaction": true
              }
            ]
          }
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE dept_emp DROP CONSTRAINT dept_emp_emp_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "drop",
          "path": "public.dept_emp.dept_emp_emp_no_fkey"
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE dept_emp\nADD CONSTRAINT dept_emp_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee(emp_no) ON DELETE CASCADE NOT VALID;",
              "can_run_in_transaction": true
            },
            {
              "sql": "ALTER TABLE dept_emp VALIDATE CONSTRAINT dept_emp_emp_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "create",
          "path": "public.dept_emp.dept_emp_emp_no_fkey",
          "rewrite": {
            "statements": [
              {
                "sql": "ALTER TABLE dept_emp\nADD CONSTRAINT dept_emp_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee(emp_no) ON DELETE CASCADE NOT VALID;",
                "can_run_in_transaction": true
              },
              {
                "sql": "ALTER TABLE dept_emp VALIDATE CONSTRAINT dept_emp_emp_no_fkey;",
                "can_run_in_transaction": true
              }
            ]
          }
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE dept_manager DROP CONSTRAINT dept_manager_dept_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "drop",
          "path": "public.dept_manager.dept_manager_dept_no_fkey"
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE dept_manager\nADD CONSTRAINT dept_manager_dept_no_fkey FOREIGN KEY (dept_no) REFERENCES department(dept_no) ON DELETE CASCADE NOT VALID;",
              "can_run_in_transaction": true
            },
            {
              "sql": "ALTER TABLE dept_manager VALIDATE CONSTRAINT dept_manager_dept_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "create",
          "path": "public.dept_manager.dept_manager_dept_no_fkey",
          "rewrite": {
            "statements": [
              {
                "sql": "ALTER TABLE dept_manager\nADD CONSTRAINT dept_manager_dept_no_fkey FOREIGN KEY (dept_no) REFERENCES department(dept_no) ON DELETE CASCADE NOT VALID;",
                "can_run_in_transaction": true
              },
              {
                "sql": "ALTER TABLE dept_manager VALIDATE CONSTRAINT dept_manager_dept_no_fkey;",
                "can_run_in_transaction": true
              }
            ]
          }
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE dept_manager DROP CONSTRAINT dept_manager_emp_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "drop",
          "path": "public.dept_manager.dept_manager_emp_no_fkey"
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE dept_manager\nADD CONSTRAINT dept_manager_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee(emp_no) ON DELETE CASCADE NOT VALID;",
              "can_run_in_transaction": true
            },
            {
              "sql": "ALTER TABLE dept_manager VALIDATE CONSTRAINT dept_manager_emp_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "create",
          "path": "public.dept_manager.dept_manager_emp_no_fkey",
          "rewrite": {
            "statements": [
              {
                "sql": "ALTER TABLE dept_manager\nADD CONSTRAINT dept_manager_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee(emp_no) ON DELETE CASCADE NOT VALID;",
                "can_run_in_transaction": true
              },
              {
                "sql": "ALTER TABLE dept_manager VALIDATE CONSTRAINT dept_manager_emp_no_fkey;",
                "can_run_in_transaction": true
              }
            ]
          }
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE employee\nADD CONSTRAINT employee_gender_check CHECK (gender IN ('M', 'F')) NOT VALID;",
              "can_run_in_transaction": true
            },
            {
              "sql": "ALTER TABLE employee VALIDATE CONSTRAINT employee_gender_check;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "create",
          "path": "public.employee.employee_gender_check",
          "rewrite": {
            "statements": [
              {
                "sql": "ALTER TABLE employee\nADD CONSTRAINT employee_gender_check CHECK (gender IN ('M', 'F')) NOT VALID;",
                "can_run_in_transaction": true
              },
              {
                "sql": "ALTER TABLE employee VALIDATE CONSTRAINT employee_gender_check;",
                "can_run_in_transaction": true
              }
            ]
          }
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE salary DROP CONSTRAINT salary_emp_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "drop",
          "path": "public.salary.salary_emp_no_fkey"
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE salary\nADD CONSTRAINT salary_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee(emp_no) ON DELETE CASCADE NOT VALID;",
              "can_run_in_transaction": true
            },
            {
              "sql": "ALTER TABLE salary VALIDATE CONSTRAINT salary_emp_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "create",
          "path": "public.salary.salary_emp_no_fkey",
          "rewrite": {
            "statements": [
              {
                "sql": "ALTER TABLE salary\nADD CONSTRAINT salary_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee(emp_no) ON DELETE CASCADE NOT VALID;",
                "can_run_in_transaction": true
              },
              {
                "sql": "ALTER TABLE salary VALIDATE CONSTRAINT salary_emp_no_fkey;",
                "can_run_in_transaction": true
              }
            ]
          }
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE title DROP CONSTRAINT title_emp_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "drop",
          "path": "public.title.title_emp_no_fkey"
        },
        {
          "statements": [
            {
              "sql": "ALTER TABLE title\nADD CONSTRAINT title_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee(emp_no) ON DELETE CASCADE NOT VALID;",
              "can_run_in_transaction": true
            },
            {
              "sql": "ALTER TABLE title VALIDATE CONSTRAINT title_emp_no_fkey;",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.constraint",
          "operation": "create",
          "path": "public.title.title_emp_no_fkey",
          "rewrite": {
            "statements": [
              {
                "sql": "ALTER TABLE title\nADD CONSTRAINT title_emp_no_fkey FOREIGN KEY (emp_no) REFERENCES employee(emp_no) ON DELETE CASCADE NOT VALID;",
                "can_run_in_transaction": true
              },
              {
                "sql": "ALTER TABLE title VALIDATE CONSTRAINT title_emp_no_fkey;",
                "can_run_in_transaction": true
              }
            ]
          }
        }
      ]
    },
    {
      "steps": [
        {
          "statements": [
            {
              "sql": "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_employee_hire_date ON employee (hire_date);",
              "can_run_in_transaction": false
            }
          ],
          "type": "table.index",
          "operation": "create",
          "path": "public.employee.idx_employee_hire_date"
        }
      ]
    },
    {
      "steps": [
        {
          "statements": [
            {
              "sql": "SELECT \n    COALESCE(i.indisvalid, false) as done,\n    CASE \n        WHEN p.blocks_total > 0 THEN p.blocks_done * 100 / p.blocks_total\n        ELSE 0\n    END as progress\nFROM pg_class c\nLEFT JOIN pg_index i ON c.oid = i.indexrelid\nLEFT JOIN pg_stat_progress_create_index p ON c.oid = p.index_relid\nWHERE c.relname = 'idx_employee_hire_date';",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.index",
          "operation": "create",
          "path": "public.employee.idx_employee_hire_date",
          "rewrite": {
            "statements": [
              {
                "sql": "SELECT \n    COALESCE(i.indisvalid, false) as done,\n    CASE \n        WHEN p.blocks_total > 0 THEN p.blocks_done * 100 / p.blocks_total\n        ELSE 0\n    END as progress\nFROM pg_class c\nLEFT JOIN pg_index i ON c.oid = i.indexrelid\nLEFT JOIN pg_stat_progress_create_index p ON c.oid = p.index_relid\nWHERE c.relname = 'idx_employee_hire_date';",
                "can_run_in_transaction": true,
                "directive": {
                  "type": "wait",
                  "message": "Creating index idx_employee_hire_date"
                }
              }
            ]
          }
        }
      ]
    },
    {
      "steps": [
        {
          "statements": [
            {
              "sql": "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_salary_amount ON salary (amount);",
              "can_run_in_transaction": false
            }
          ],
          "type": "table.index",
          "operation": "create",
          "path": "public.salary.idx_salary_amount"
        }
      ]
    },
    {
      "steps": [
        {
          "statements": [
            {
              "sql": "SELECT \n    COALESCE(i.indisvalid, false) as done,\n    CASE \n        WHEN p.blocks_total > 0 THEN p.blocks_done * 100 / p.blocks_total\n        ELSE 0\n    END as progress\nFROM pg_class c\nLEFT JOIN pg_index i ON c.oid = i.indexrelid\nLEFT JOIN pg_stat_progress_create_index p ON c.oid = p.index_relid\nWHERE c.relname = 'idx_salary_amount';",
              "can_run_in_transaction": true
            }
          ],
          "type": "table.index",
          "operation": "create",
          "path": "public.salary.idx_salary_amount",
          "rewrite": {
            "statements": [
              {
                "sql": "SELECT \n    COALESCE(i.indisvalid, false) as done,\n    CASE \n        WHEN p.blocks_total > 0 THEN p.blocks_done * 100 / p.blocks_total\n        ELSE 0\n    END as progress\nFROM pg_class c\nLEFT JOIN pg_index i ON c.oid = i.indexrelid\nLEFT JOIN pg_stat_progress_create_index p ON c.oid = p.index_relid\nWHERE c.relname = 'idx_salary_amount';",
                "can_run_in_transaction": true,
                "directive": {
                  "type": "wait",
                  "message": "Creating index idx_salary_amount"
                }
              }
            ]
          }
        }
      ]
    }
  ]
}
