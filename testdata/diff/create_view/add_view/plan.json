{
  "version": "1.0.0",
  "pgschema_version": "1.4.0",
  "created_at": "1970-01-01T00:00:00Z",
  "source_fingerprint": {
    "hash": "e937536446c155860f69ab4a38fc142791a9a3636ada3e9113057afd9d875190"
  },
  "groups": [
    {
      "steps": [
        {
          "sql": "CREATE OR REPLACE VIEW array_operators_view AS\nSELECT\n    id,\n    priority,\n    -- All ANY operations preserve the ANY syntax\n    CASE WHEN priority = ANY(ARRAY[10, 20, 30]) THEN 'matched' ELSE 'not_matched' END AS equal_any_test,\n    CASE WHEN priority > ANY(ARRAY[10, 20, 30]) THEN 'high' ELSE 'low' END AS greater_any_test,\n    CASE WHEN priority < ANY(ARRAY[5, 15, 25]) THEN 'found_lower' ELSE 'all_higher' END AS less_any_test,\n    CASE WHEN priority <> ANY(ARRAY[1, 2, 3]) THEN 'different' ELSE 'same' END AS not_equal_any_test\nFROM employees;",
          "type": "view",
          "operation": "create",
          "path": "public.array_operators_view"
        },
        {
          "sql": "CREATE OR REPLACE VIEW cte_with_case_view AS\nWITH monthly_stats AS (\n    SELECT\n        date_trunc('month', CURRENT_DATE - (n || ' months')::INTERVAL) AS month_start,\n        n AS month_offset\n    FROM generate_series(0, 11) AS n\n),\nemployee_summary AS (\n    SELECT\n        department_id,\n        COUNT(*) AS employee_count,\n        AVG(priority) AS avg_priority\n    FROM employees\n    WHERE status = 'active'\n    GROUP BY department_id\n)\nSELECT\n    ms.month_start,\n    ms.month_offset,\n    d.name AS department_name,\n    COALESCE(es.employee_count, 0) AS employee_count,\n    -- CASE statement using CTE data (triggers the bug from #106)\n    CASE\n        WHEN es.avg_priority > 50 THEN 'high'\n        WHEN es.avg_priority > 25 THEN 'medium'\n        WHEN es.avg_priority IS NOT NULL THEN 'low'\n        ELSE 'no_data'\n    END AS priority_level,\n    -- Another CASE with CTE\n    CASE\n        WHEN ms.month_offset = 0 THEN 'current'\n        WHEN ms.month_offset <= 3 THEN 'recent'\n        ELSE 'historical'\n    END AS period_type\nFROM monthly_stats ms\nCROSS JOIN departments d\nLEFT JOIN employee_summary es ON d.id = es.department_id\nORDER BY ms.month_start DESC, d.name;",
          "type": "view",
          "operation": "create",
          "path": "public.cte_with_case_view"
        },
        {
          "sql": "CREATE OR REPLACE VIEW nullif_functions_view AS\nSELECT\n    e.id,\n    e.name AS employee_name,\n    d.name AS department_name,\n    -- NULLIF to avoid divide-by-zero (main issue from #103)\n    (e.priority - d.manager_id) / NULLIF(d.manager_id, 0) AS priority_ratio,\n    -- Multiple NULLIF expressions\n    NULLIF(e.status, 'inactive') AS active_status,\n    NULLIF(e.email, '') AS valid_email,\n    -- GREATEST and LEAST functions\n    GREATEST(e.priority, 0) AS min_priority,\n    LEAST(e.priority, 100) AS max_priority,\n    GREATEST(e.id, d.id, e.department_id) AS max_id,\n    -- Complex CASE with NULLIF\n    CASE\n        WHEN NULLIF(e.department_id, 0) IS NOT NULL THEN 'assigned'\n        ELSE 'unassigned'\n    END AS assignment_status\nFROM employees e\nJOIN departments d USING (id)\nWHERE e.priority > 0;",
          "type": "view",
          "operation": "create",
          "path": "public.nullif_functions_view"
        },
        {
          "sql": "CREATE OR REPLACE VIEW text_search_view AS\nSELECT\n    id,\n    COALESCE(first_name || ' ' || last_name, 'Anonymous') AS display_name,\n    COALESCE(email, '') AS email,\n    COALESCE(bio, 'No description available') AS description,\n    to_tsvector('english', COALESCE(first_name, '') || ' ' || COALESCE(last_name, '') || ' ' || COALESCE(bio, '')) AS search_vector\nFROM employees\nWHERE status = 'active';",
          "type": "view",
          "operation": "create",
          "path": "public.text_search_view"
        },
        {
          "sql": "CREATE OR REPLACE VIEW union_subquery_view AS\nSELECT\n    id,\n    name,\n    source_type,\n    -- Additional columns from the union result\n    CASE\n        WHEN source_type = 'employee' THEN 'active'\n        WHEN source_type = 'department' THEN 'organizational'\n        ELSE 'unknown'\n    END AS category\nFROM (\n    -- Simple UNION combining employees and departments (main issue from #104)\n    SELECT\n        id,\n        name,\n        'employee' AS source_type\n    FROM employees\n    WHERE status = 'active'\n    UNION\n    SELECT\n        id,\n        name,\n        'department' AS source_type\n    FROM departments\n    WHERE manager_id IS NOT NULL\n    -- UNION ALL variant (keep duplicates)\n    UNION ALL\n    SELECT\n        id,\n        COALESCE(first_name || ' ' || last_name, name) AS name,\n        'employee_full' AS source_type\n    FROM employees\n    WHERE priority > 10\n) AS combined_data\nWHERE id IS NOT NULL\nORDER BY source_type, id;",
          "type": "view",
          "operation": "create",
          "path": "public.union_subquery_view"
        }
      ]
    }
  ]
}
