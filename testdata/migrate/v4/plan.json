{
  "version": "1.0.0",
  "pgschema_version": "0.2.0",
  "created_at": "2025-08-03T13:08:06+08:00",
  "transaction": false,
  "summary": {
    "total": 6,
    "add": 3,
    "change": 3,
    "destroy": 0,
    "by_type": {
      "functions": {
        "add": 0,
        "change": 1,
        "destroy": 0
      },
      "procedures": {
        "add": 1,
        "change": 0,
        "destroy": 0
      },
      "tables": {
        "add": 0,
        "change": 2,
        "destroy": 0
      },
      "views": {
        "add": 2,
        "change": 0,
        "destroy": 0
      }
    }
  },
  "diffs": [
    {
      "sql": "CREATE OR REPLACE PROCEDURE simple_salary_update(\n    p_emp_no integer,\n    p_amount integer\n)\nLANGUAGE plpgsql\nAS $$\nBEGIN\n    -- Simple update of salary amount\n    UPDATE salary \n    SET amount = p_amount \n    WHERE emp_no = p_emp_no \n    AND to_date = '9999-01-01';\n    \n    RAISE NOTICE 'Updated salary for employee % to $%', p_emp_no, p_amount;\nEND;\n$$;",
      "type": "procedure",
      "operation": "create",
      "path": "public.simple_salary_update",
      "source": {
        "schema": "public",
        "name": "simple_salary_update",
        "definition": "\nBEGIN\n    -- Simple update of salary amount\n    UPDATE salary \n    SET amount = p_amount \n    WHERE emp_no = p_emp_no \n    AND to_date = '9999-01-01';\n    \n    RAISE NOTICE 'Updated salary for employee % to $%', p_emp_no, p_amount;\nEND;\n",
        "language": "plpgsql",
        "arguments": "p_emp_no integer, p_amount integer"
      },
      "can_run_in_transaction": true
    },
    {
      "sql": "CREATE OR REPLACE VIEW dept_emp_latest_date AS\n SELECT\n    emp_no,\n    max(from_date) AS from_date,\n    max(to_date) AS to_date\n   FROM dept_emp\n  GROUP BY emp_no;",
      "type": "view",
      "operation": "create",
      "path": "public.dept_emp_latest_date",
      "source": {
        "schema": "public",
        "name": "dept_emp_latest_date",
        "definition": " SELECT\n    emp_no,\n    max(from_date) AS from_date,\n    max(to_date) AS to_date\n   FROM dept_emp\n  GROUP BY emp_no"
      },
      "can_run_in_transaction": false
    },
    {
      "sql": "CREATE OR REPLACE VIEW current_dept_emp AS\n SELECT\n    l.emp_no,\n    d.dept_no,\n    l.from_date,\n    l.to_date\n   FROM dept_emp d\n     JOIN dept_emp_latest_date l ON d.emp_no = l.emp_no AND d.from_date = l.from_date AND l.to_date = d.to_date;",
      "type": "view",
      "operation": "create",
      "path": "public.current_dept_emp",
      "source": {
        "schema": "public",
        "name": "current_dept_emp",
        "definition": " SELECT\n    l.emp_no,\n    d.dept_no,\n    l.from_date,\n    l.to_date\n   FROM dept_emp d\n     JOIN dept_emp_latest_date l ON d.emp_no = l.emp_no AND d.from_date = l.from_date AND l.to_date = d.to_date"
      },
      "can_run_in_transaction": false
    },
    {
      "sql": "CREATE INDEX IF NOT EXISTS idx_audit_operation ON audit (operation);",
      "type": "table.index",
      "operation": "create",
      "path": "public.audit.idx_audit_operation",
      "source": {
        "schema": "public",
        "table": "audit",
        "name": "idx_audit_operation",
        "type": "REGULAR",
        "method": "btree",
        "columns": [
          {
            "name": "operation",
            "position": 1,
            "direction": "ASC"
          }
        ],
        "is_concurrent": false,
        "is_partial": false,
        "is_expression": false
      },
      "can_run_in_transaction": true
    },
    {
      "sql": "CREATE INDEX IF NOT EXISTS idx_audit_username ON audit (user_name);",
      "type": "table.index",
      "operation": "create",
      "path": "public.audit.idx_audit_username",
      "source": {
        "schema": "public",
        "table": "audit",
        "name": "idx_audit_username",
        "type": "REGULAR",
        "method": "btree",
        "columns": [
          {
            "name": "user_name",
            "position": 1,
            "direction": "ASC"
          }
        ],
        "is_concurrent": false,
        "is_partial": false,
        "is_expression": false
      },
      "can_run_in_transaction": true
    },
    {
      "sql": "CREATE OR REPLACE TRIGGER salary_log_trigger\n    AFTER UPDATE OR DELETE ON salary\n    FOR EACH ROW\n    EXECUTE FUNCTION log_dml_operations('payroll', 'high');",
      "type": "table.trigger",
      "operation": "alter",
      "path": "public.salary.salary_log_trigger",
      "source": {
        "Old": {
          "schema": "public",
          "table": "salary",
          "name": "salary_log_trigger",
          "timing": "AFTER",
          "events": [
            "UPDATE",
            "DELETE"
          ],
          "level": "ROW",
          "function": "log_dml_operations()"
        },
        "New": {
          "schema": "public",
          "table": "salary",
          "name": "salary_log_trigger",
          "timing": "AFTER",
          "events": [
            "UPDATE",
            "DELETE"
          ],
          "level": "ROW",
          "function": "log_dml_operations('payroll', 'high')"
        }
      },
      "can_run_in_transaction": true
    },
    {
      "sql": "CREATE OR REPLACE FUNCTION log_dml_operations()\nRETURNS trigger\nLANGUAGE plpgsql\nSECURITY INVOKER\nVOLATILE\nAS $$\nDECLARE\n    table_category TEXT;\n    log_level TEXT;\nBEGIN\n    -- Get arguments passed from trigger (if any)\n    -- TG_ARGV[0] is the first argument, TG_ARGV[1] is the second\n    table_category := COALESCE(TG_ARGV[0], 'default');\n    log_level := COALESCE(TG_ARGV[1], 'standard');\n    \n    IF (TG_OP = 'INSERT') THEN\n        INSERT INTO audit (operation, query, user_name)\n        VALUES (\n            'INSERT [' || table_category || ':' || log_level || ']', \n            current_query(), \n            current_user\n        );\n        RETURN NEW;\n    ELSIF (TG_OP = 'UPDATE') THEN\n        INSERT INTO audit (operation, query, user_name)\n        VALUES (\n            'UPDATE [' || table_category || ':' || log_level || ']', \n            current_query(), \n            current_user\n        );\n        RETURN NEW;\n    ELSIF (TG_OP = 'DELETE') THEN\n        INSERT INTO audit (operation, query, user_name)\n        VALUES (\n            'DELETE [' || table_category || ':' || log_level || ']', \n            current_query(), \n            current_user\n        );\n        RETURN OLD;\n    END IF;\n    RETURN NULL;\nEND;\n$$;",
      "type": "function",
      "operation": "alter",
      "path": "public.log_dml_operations",
      "source": {
        "Old": {
          "schema": "public",
          "name": "log_dml_operations",
          "definition": "\nBEGIN\n    IF (TG_OP = 'INSERT') THEN\n        INSERT INTO audit (operation, query, user_name)\n        VALUES ('INSERT', current_query(), current_user);\n        RETURN NEW;\n    ELSIF (TG_OP = 'UPDATE') THEN\n        INSERT INTO audit (operation, query, user_name)\n        VALUES ('UPDATE', current_query(), current_user);\n        RETURN NEW;\n    ELSIF (TG_OP = 'DELETE') THEN\n        INSERT INTO audit (operation, query, user_name)\n        VALUES ('DELETE', current_query(), current_user);\n        RETURN OLD;\n    END IF;\n    RETURN NULL;\nEND;\n",
          "return_type": "trigger",
          "language": "plpgsql",
          "volatility": "VOLATILE"
        },
        "New": {
          "schema": "public",
          "name": "log_dml_operations",
          "definition": "\nDECLARE\n    table_category TEXT;\n    log_level TEXT;\nBEGIN\n    -- Get arguments passed from trigger (if any)\n    -- TG_ARGV[0] is the first argument, TG_ARGV[1] is the second\n    table_category := COALESCE(TG_ARGV[0], 'default');\n    log_level := COALESCE(TG_ARGV[1], 'standard');\n    \n    IF (TG_OP = 'INSERT') THEN\n        INSERT INTO audit (operation, query, user_name)\n        VALUES (\n            'INSERT [' || table_category || ':' || log_level || ']', \n            current_query(), \n            current_user\n        );\n        RETURN NEW;\n    ELSIF (TG_OP = 'UPDATE') THEN\n        INSERT INTO audit (operation, query, user_name)\n        VALUES (\n            'UPDATE [' || table_category || ':' || log_level || ']', \n            current_query(), \n            current_user\n        );\n        RETURN NEW;\n    ELSIF (TG_OP = 'DELETE') THEN\n        INSERT INTO audit (operation, query, user_name)\n        VALUES (\n            'DELETE [' || table_category || ':' || log_level || ']', \n            current_query(), \n            current_user\n        );\n        RETURN OLD;\n    END IF;\n    RETURN NULL;\nEND;\n",
          "return_type": "trigger",
          "language": "plpgsql",
          "volatility": "VOLATILE"
        }
      },
      "can_run_in_transaction": true
    }
  ]
}